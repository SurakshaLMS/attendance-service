// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// Users table - synced from main LMS
model User {
  id               Int                           @id @default(autoincrement())
  externalId       String                        @unique // ID from main LMS
  email            String                        @unique
  username         String                        @unique
  firstName        String
  lastName         String
  profilePicture   String?
  isActive         Boolean                       @default(true)
  lastSyncedAt     DateTime                      @default(now())
  createdAt        DateTime                      @default(now())
  updatedAt        DateTime                      @updatedAt

  // Relations
  instituteOrgUsers     InstituteOrganizationUser[]
  globalOrgUsers        GlobalOrganizationUser[]
  lectureEnrollments    LectureEnrollment[]
  verifiedInstituteOrgs InstituteOrganizationUser[] @relation("VerifiedBy")
  verifiedGlobalOrgs    GlobalOrganizationUser[]    @relation("GlobalVerifiedBy")
  
  // Cause relations
  causeEnrollments      CauseEnrollment[]
  verifiedCauseEnrollments CauseEnrollment[]        @relation("CauseVerifiedBy")
  uploadedDocuments     LectureDocument[]
  causeLectureEnrollments CauseLectureEnrollment[]

  @@map("users")
}

// Institutes table - synced from main LMS
model Institute {
  id               Int                           @id @default(autoincrement())
  externalId       String                        @unique // ID from main LMS
  name             String
  code             String                        @unique
  description      String?
  logo             String?
  isActive         Boolean                       @default(true)
  lastSyncedAt     DateTime                      @default(now())
  createdAt        DateTime                      @default(now())
  updatedAt        DateTime                      @updatedAt

  // Relations
  organizations    InstituteOrganization[]

  @@map("institutes")
}

// Organizations within institutes
model InstituteOrganization {
  id               Int                           @id @default(autoincrement())
  instituteId      Int
  name             String
  description      String?
  logo             String?
  enrollmentKey    String                        @unique
  requiresVerification Boolean                   @default(false)
  isActive         Boolean                       @default(true)
  createdAt        DateTime                      @default(now())
  updatedAt        DateTime                      @updatedAt

  // Relations
  institute        Institute                     @relation(fields: [instituteId], references: [id], onDelete: Cascade)
  users            InstituteOrganizationUser[]
  lectures         Lecture[]
  causes           Cause[]

  @@map("institute_organizations")
}

enum OrganizationUserRole {
  PRESIDENT
  VICE_PRESIDENT
  SECRETARY
  TREASURER
  MEMBER
  MODERATOR
}

enum VerificationStatus {
  PENDING
  APPROVED
  REJECTED
}

// Users in institute organizations with separate authentication
model InstituteOrganizationUser {
  id               Int                           @id @default(autoincrement())
  userId           Int
  organizationId   Int
  role             OrganizationUserRole          @default(MEMBER)
  hashedPassword   String                        // Separate password for organization access
  verificationStatus VerificationStatus          @default(PENDING)
  verifiedBy       Int?                          // User ID who verified
  verifiedAt       DateTime?
  enrolledAt       DateTime                      @default(now())
  isActive         Boolean                       @default(true)
  createdAt        DateTime                      @default(now())
  updatedAt        DateTime                      @updatedAt

  // Relations
  user             User                          @relation(fields: [userId], references: [id], onDelete: Cascade)
  organization     InstituteOrganization         @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  verifier         User?                         @relation("VerifiedBy", fields: [verifiedBy], references: [id])

  @@unique([userId, organizationId])
  @@map("institute_organization_users")
}

// Global organizations (not tied to specific institutes)
model GlobalOrganization {
  id               Int                           @id @default(autoincrement())
  name             String
  description      String?
  logo             String?
  enrollmentKey    String                        @unique
  requiresVerification Boolean                   @default(false)
  isActive         Boolean                       @default(true)
  createdAt        DateTime                      @default(now())
  updatedAt        DateTime                      @updatedAt

  // Relations
  users            GlobalOrganizationUser[]
  lectures         Lecture[]
  causes           Cause[]

  @@map("global_organizations")
}

enum GlobalUserRole {
  ADMIN
  PRESIDENT
  VICE_PRESIDENT
  SECRETARY
  TREASURER
  MEMBER
  MODERATOR
}

// Users in global organizations with separate authentication
model GlobalOrganizationUser {
  id               Int                           @id @default(autoincrement())
  userId           Int
  organizationId   Int
  role             GlobalUserRole                @default(MEMBER)
  hashedPassword   String                        // Separate password for organization access
  verificationStatus VerificationStatus          @default(PENDING)
  verifiedBy       Int?                          // User ID who verified
  verifiedAt       DateTime?
  enrolledAt       DateTime                      @default(now())
  isActive         Boolean                       @default(true)
  createdAt        DateTime                      @default(now())
  updatedAt        DateTime                      @updatedAt

  // Relations
  user             User                          @relation(fields: [userId], references: [id], onDelete: Cascade)
  organization     GlobalOrganization            @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  verifier         User?                         @relation("GlobalVerifiedBy", fields: [verifiedBy], references: [id])

  @@unique([userId, organizationId])
  @@map("global_organization_users")
}

enum LectureVisibility {
  PUBLIC
  PRIVATE
}

enum LectureLevel {
  GLOBAL
  INSTITUTE_ORGANIZATION
}

// Lectures for organizations
model Lecture {
  id                    Int                           @id @default(autoincrement())
  title                 String
  description           String?
  content               String?                       @db.LongText
  visibility            LectureVisibility             @default(PRIVATE)
  level                 LectureLevel
  
  // For institute organization lectures
  instituteOrganizationId Int?
  
  // For global organization lectures
  globalOrganizationId    Int?
  
  isActive              Boolean                       @default(true)
  createdAt             DateTime                      @default(now())
  updatedAt             DateTime                      @updatedAt

  // Relations
  instituteOrganization InstituteOrganization?        @relation(fields: [instituteOrganizationId], references: [id], onDelete: Cascade)
  globalOrganization    GlobalOrganization?           @relation(fields: [globalOrganizationId], references: [id], onDelete: Cascade)
  enrollments           LectureEnrollment[]

  @@map("lectures")
}

// Lecture enrollments for tracking who accessed what
model LectureEnrollment {
  id               Int                           @id @default(autoincrement())
  userId           Int
  lectureId        Int
  enrolledAt       DateTime                      @default(now())
  lastAccessedAt   DateTime?
  completedAt      DateTime?
  isActive         Boolean                       @default(true)

  // Relations
  user             User                          @relation(fields: [userId], references: [id], onDelete: Cascade)
  lecture          Lecture                       @relation(fields: [lectureId], references: [id], onDelete: Cascade)

  @@unique([userId, lectureId])
  @@map("lecture_enrollments")
}

enum CauseVisibility {
  PUBLIC
  PRIVATE
}

// Causes for organizations - like campaigns or programs
model Cause {
  id                      Int                           @id @default(autoincrement())
  title                   String
  description             String?
  content                 String?                       @db.LongText
  coverImage              String?                       // URL to cover image
  visibility              CauseVisibility               @default(PRIVATE)
  requiresVerification    Boolean                       @default(false)
  enrollmentKey           String?                       @unique // Optional enrollment key
  
  // For institute organization causes
  instituteOrganizationId Int?
  
  // For global organization causes
  globalOrganizationId    Int?
  
  isActive                Boolean                       @default(true)
  createdAt               DateTime                      @default(now())
  updatedAt               DateTime                      @updatedAt

  // Relations
  instituteOrganization   InstituteOrganization?        @relation(fields: [instituteOrganizationId], references: [id], onDelete: Cascade)
  globalOrganization      GlobalOrganization?           @relation(fields: [globalOrganizationId], references: [id], onDelete: Cascade)
  enrollments             CauseEnrollment[]
  lectures                CauseLecture[]

  @@map("causes")
}

// User enrollment in causes
model CauseEnrollment {
  id                 Int                           @id @default(autoincrement())
  userId             Int
  causeId            Int
  verificationStatus VerificationStatus            @default(PENDING)
  verifiedBy         Int?                          // User ID who verified
  verifiedAt         DateTime?
  enrolledAt         DateTime                      @default(now())
  isActive           Boolean                       @default(true)
  createdAt          DateTime                      @default(now())
  updatedAt          DateTime                      @updatedAt

  // Relations
  user               User                          @relation(fields: [userId], references: [id], onDelete: Cascade)
  cause              Cause                         @relation(fields: [causeId], references: [id], onDelete: Cascade)
  verifier           User?                         @relation("CauseVerifiedBy", fields: [verifiedBy], references: [id])

  @@unique([userId, causeId])
  @@map("cause_enrollments")
}

enum LectureType {
  LIVE
  RECORDED
  HYBRID
}

enum LectureStatus {
  SCHEDULED
  LIVE
  COMPLETED
  CANCELLED
}

// Lectures specific to causes
model CauseLecture {
  id                Int                           @id @default(autoincrement())
  causeId           Int
  title             String
  description       String?
  content           String?                       @db.LongText
  type              LectureType                   @default(RECORDED)
  status            LectureStatus                 @default(SCHEDULED)
  
  // Live streaming details
  liveStreamUrl     String?
  scheduledAt       DateTime?
  startedAt         DateTime?
  endedAt           DateTime?
  
  // Recording details
  recordingUrl      String?
  recordingAvailableAfter DateTime?               // When recording becomes available
  
  // Access control
  visibility        LectureVisibility             @default(PRIVATE)
  requiresEnrollment Boolean                      @default(true)
  
  isActive          Boolean                       @default(true)
  createdAt         DateTime                      @default(now())
  updatedAt         DateTime                      @updatedAt

  // Relations
  cause             Cause                         @relation(fields: [causeId], references: [id], onDelete: Cascade)
  documents         LectureDocument[]
  enrollments       CauseLectureEnrollment[]

  @@map("cause_lectures")
}

enum DocumentType {
  PDF
  DOC
  DOCX
  PPT
  PPTX
  IMAGE
  VIDEO
  AUDIO
  OTHER
}

// Documents attached to cause lectures
model LectureDocument {
  id               Int                           @id @default(autoincrement())
  causeLectureId   Int
  title            String
  description      String?
  documentUrl      String                        // URL to the document
  documentType     DocumentType
  fileSize         Int?                          // File size in bytes
  uploadedBy       Int                           // User ID who uploaded
  isActive         Boolean                       @default(true)
  createdAt        DateTime                      @default(now())
  updatedAt        DateTime                      @updatedAt

  // Relations
  causeLecture     CauseLecture                  @relation(fields: [causeLectureId], references: [id], onDelete: Cascade)
  uploader         User                          @relation(fields: [uploadedBy], references: [id])

  @@map("lecture_documents")
}

// User enrollment in cause lectures
model CauseLectureEnrollment {
  id               Int                           @id @default(autoincrement())
  userId           Int
  causeLectureId   Int
  enrolledAt       DateTime                      @default(now())
  lastAccessedAt   DateTime?
  completedAt      DateTime?
  watchTimeMinutes Int                           @default(0)
  isActive         Boolean                       @default(true)

  // Relations
  user             User                          @relation(fields: [userId], references: [id], onDelete: Cascade)
  causeLecture     CauseLecture                  @relation(fields: [causeLectureId], references: [id], onDelete: Cascade)

  @@unique([userId, causeLectureId])
  @@map("cause_lecture_enrollments")
}
